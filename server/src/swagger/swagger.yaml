openapi: 3.0.0
info:
  title: Node Express Typescript API
  version: 1.0.0
  description: Node Express Typescript API
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    components:

  schemas:
    UserInputLogin:
      type: object
      properties:
        id:
          type: number
          example: 12
          readOnly: true
        email:
          type: string
          format: email
          example: timothy@email.com
        password:
          type: string
          format: password
          example: Aa1!abcd
          writeOnly: true
          minLength: 8
          maxLength: 128
      required:
        - email
        - password

    UserInputRegister:
      allOf:
        - $ref: "#/components/schemas/UserInputLogin"
        - type: object
          properties:
            name:
              type: string
              example: Timothy
              minLength: 3
              maxLength: 20
    
    UserInputUpdate:
      type: object
      properties:
        id:
          type: number
          example: 1
          readOnly: true
        name:
          type: string
          example: Timothy updated
          minLength: 3
          maxLength: 20
        email:
          type: string
          example: timothy@email.com
          format: email

    UserInputUpdatePassword:
      type: object
      properties:
        oldPassword:
          type: string
          example: Aa1!abcd
          format: password
          minLength: 8
          maxLength: 128
        newPassword:
          type: string
          example: Aa1!abcde
          format: password
          minLength: 8
          maxLength: 128


    PostInput:
      type: object
      properties:
        title:
          type: string
          example: Post title
        content:
          type: string
          example: Post content
        id:
          type: number
          example: 10
          readOnly: true
        imageUrl:
          type: string
          example: https://storage-bucket.com/image-id
          readOnly: true
          nullable: true
        imagePublicId:
          type: string
          example: image-public-id
          readOnly: true
          nullable: true
        authorId:
          type: number
          example: 1
          readOnly: true
        createdAt:
          type: string
          example: "2025-05-10T19:21:15.668Z"
          readOnly: true
        updatedAt:
          type: string
          example: "2025-05-10T19:21:15.668Z"
          readOnly: true
      required:
        - title
        - content

paths:
  /api/v1/users:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputRegister"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user created
                  user:
                    $ref: "#/components/schemas/UserInputRegister"
        400:
          description: Input validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: password must contain at least 8 characters
        409:
          description: Conflict - email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: email already exists

  /api/v1/users/login:
    post:
      summary: Login user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputLogin"
      responses:
        200:
          description: User login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: login successful
                  user:
                    $ref: "#/components/schemas/UserInputRegister"
        400:
          description: Input validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: email and password are required
        401:
          description: Unauthenticated action
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: invalid credentials

  /api/v1/users/{userId}:
    get:
      summary: Get user
      description: Retrieve a single user by their unique user id
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
      responses:
        200:
          description: Successfully retrieved user
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user fetch success'
                  user:
                    $ref: "#/components/schemas/UserInputRegister"

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user id must be a positive integer'    

        404:
          description: User not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user not found'
    
    patch:
      summary: Update user
      description: Update a single user by their unique user id
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputUpdate"
          
      responses:
        200:
          description: Successfully updated user
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user update success'
                  user:
                    $ref: "#/components/schemas/UserInputUpdate"

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                negativeId:
                  summary: negative userId
                  value:
                    message: user id must be a positive integer    
                noInputs:
                  summary: email and name both are missing
                  value:
                    message: atleast one field is required for updation 
        
        401:
          description: Unauthenticated action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthenticated action'
        
        403:
          description: Unauthorized action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthorized action'

        404:
          description: User not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user not found'

    delete:
      summary: Delete user
      description: Delete a single user by their unique user id
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to delete
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
          
      responses:
        204:
          description: Successfully deleted user

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user id must be a positive integer  
        
        401:
          description: Unauthenticated action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthenticated action'

        403:
          description: Unauthorized action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthorized action'

        404:
          description: User not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user to delete does not exist'
  
  /api/v1/users/{userId}/password:
    patch:
      summary: Update user password
      description: Update a single user's password by their unique user id
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to update password for
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputUpdatePassword"
          
      responses:
        204:
          description: Successfully updated user updated

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                negativeId:
                  summary: negative userId
                  value:
                    message: user id must be a positive integer    
                sameInputs:
                  summary: same old and new password
                  value:
                    message: new password cannot be the same as old password 
   
        401:
          description: Unauthenticated action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthenticated action'

        403:
          description: Unauthorized action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthorized action'

        404:
          description: User not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'user not found'



  /api/v1/posts:
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: post created successfully
                  post:
                    $ref: "#/components/schemas/PostInput"
        401:
          description: Unauthenticated action
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: unauthenticated action
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: post title must be at least 3 characters long

    get:
      summary: Get all posts of all users
      tags:
        - Posts
      responses:
        200:
          description: Posts fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: fetch posts success
                  posts:
                    type: array
                    items: 
                      $ref: "#/components/schemas/PostInput"

  /api/v1/posts/{postId}:
    get:
      summary: Get post
      description: Retrieve a single post by unique post id
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The id of the post to retrieve
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
      responses:
        200:
          description: Successfully retrieved post
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'fetch post success'
                  post:
                    $ref: "#/components/schemas/PostInput"

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'post id must be a positive integer'    

        404:
          description: Post not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'post not found'
    
    patch:
      summary: Update post
      description: Update a single post by unique post id
      tags:
        - Posts
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: The id of the post to update
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/PostInput"
                - type: object
                  properties:
                    title: 
                      type: string
                      example: Title updated
                    content:
                      type: string
                      example: Content updated
          
      responses:
        200:
          description: Successfully updated post
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'update post success'
                  post:
                    allOf:
                      - $ref: "#/components/schemas/PostInput"
                      - type: object
                        properties:
                          title: 
                            type: string
                            example: Title updated
                          content:
                            type: string
                            example: Content updated

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                negativeId:
                  summary: negative postId
                  value:
                    message: post id must be a positive integer    
                noInputs:
                  summary: title and content both are missing
                  value:
                    message: atleast one field is required for updation 
        
        401:
          description: Unauthenticated action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthenticated action'
        
        403:
          description: Unauthorized action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthorized action'

        404:
          description: Post not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'post not found'

    delete:
      summary: Delete post
      description: Delete a single post by unique post id
      tags:
        - Posts
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: The id of the post to delete
          schema:
            type: integer
            example: 1
            format: int64
            minimum: 1
          
      responses:
        204:
          description: Successfully deleted post

        400:
          description: Validation error
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: post id must be a positive integer  
        
        401:
          description: Unauthenticated action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthenticated action'

        403:
          description: Unauthorized action
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'unauthorized action'

        404:
          description: Post not found
          content:
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'post to delete does not exist'                 