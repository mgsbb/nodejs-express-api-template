// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id    Int    @id @default(autoincrement())
  name  String
  email String
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String         @unique
  password      String
  posts         Post[]
  comments      Comment[]
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  imageUrl      String?
  imagePublicId String?
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      Int
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id         String   @id @default(cuid())
  jti        String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issuedAt   DateTime @default(now())
  expiresAt  DateTime
  isRevoked  Boolean  @default(false)
  replacedBy String?

  @@index([jti])
  @@index([userId])
}
